
import React, { createContext, useContext, useState, useEffect, useCallback } from 'react';
import { Student, FAC, PaymentInstallment, Course, Expense, PaymentStatus } from '../types';
import { DEFAULT_COURSES, INITIAL_FACS } from '../constants';
import { v4 as uuidv4 } from 'uuid';

interface AppContextType {
  students: Student[];
  facs: FAC[];
  courses: Course[];
  expenses: Expense[];
  addStudent: (studentData: Omit<Student, 'id' | 'paymentInstallments' | 'timestamp'>) => void;
  updateStudent: (studentId: string, studentData: Partial<Student>) => void;
  deleteStudent: (studentId: string) => void;
  getStudentById: (studentId: string) => Student | undefined;
  addFac: (facData: Omit<FAC, 'code'>, codeSuffix: string) => void; // Allow custom suffix or generate
  updateFac: (facCode: string, facData: Partial<FAC>) => void;
  getFacByCode: (facCode: string) => FAC | undefined;
  addCourse: (courseData: Omit<Course, 'id'>) => void;
  updateCourse: (courseId: string, courseData: Partial<Course>) => void;
  getCourseById: (courseId: string) => Course | undefined;
  addExpense: (expenseData: Omit<Expense, 'id'>) => void;
  updatePaymentInstallment: (studentId: string, installmentId: string, updates: Partial<PaymentInstallment>) => void;
  generatePaymentInstallments: (studentId: string, courseFee: number, totalInstallments: number, startDate: string, boletoDueDate?: string) => PaymentInstallment[];
}

const AppContext = createContext<AppContextType | undefined>(undefined);

export const AppProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {
  const [students, setStudents] = useState<Student[]>(() => {
    const saved = localStorage.getItem('students');
    return saved ? JSON.parse(saved) : [];
  });
  const [facs, setFacs] = useState<FAC[]>(() => {
    const saved = localStorage.getItem('facs');
    return saved ? JSON.parse(saved) : INITIAL_FACS;
  });
  const [courses, setCourses] = useState<Course[]>(() => {
    const saved = localStorage.getItem('courses');
    return saved ? JSON.parse(saved) : DEFAULT_COURSES;
  });
  const [expenses, setExpenses] = useState<Expense[]>(() => {
    const saved = localStorage.getItem('expenses');
    return saved ? JSON.parse(saved) : [];
  });

  useEffect(() => { localStorage.setItem('students', JSON.stringify(students)); }, [students]);
  useEffect(() => { localStorage.setItem('facs', JSON.stringify(facs)); }, [facs]);
  useEffect(() => { localStorage.setItem('courses', JSON.stringify(courses)); }, [courses]);
  useEffect(() => { localStorage.setItem('expenses', JSON.stringify(expenses)); }, [expenses]);

  const generatePaymentInstallments = useCallback((studentId: string, courseFee: number, totalInstallments: number, startDateString: string, boletoDueDate?: string): PaymentInstallment[] => {
    const installments: PaymentInstallment[] = [];
    if (totalInstallments <= 0 || courseFee <= 0) return installments;

    const installmentAmount = parseFloat((courseFee / totalInstallments).toFixed(2));
    let firstDueDate = new Date(startDateString);

    // Adjust firstDueDate to be at least one month in the future from now if startDateString is in the past
    const now = new Date();
    if (firstDueDate < now) {
        firstDueDate = new Date(now.getFullYear(), now.getMonth() + 1, 1);
    }
    
    // Set day based on boletoDueDate
    if (boletoDueDate) {
      const dayMatch = boletoDueDate.match(/\d+/);
      if (dayMatch) {
        firstDueDate.setDate(parseInt(dayMatch[0], 10));
      }
    } else {
      firstDueDate.setDate(1); // Default to 1st of the month
    }


    for (let i = 0; i < totalInstallments; i++) {
      const dueDate = new Date(firstDueDate.getFullYear(), firstDueDate.getMonth() + i, firstDueDate.getDate());
      installments.push({
        id: uuidv4(),
        studentId,
        installmentNumber: i + 1,
        dueDate: dueDate.toISOString().split('T')[0],
        amount: installmentAmount,
        status: PaymentStatus.PENDING,
      });
    }
    // Adjust last installment for rounding differences
    const totalCalculated = installments.reduce((sum, inst) => sum + inst.amount, 0);
    if (totalCalculated !== courseFee && installments.length > 0) {
        const difference = parseFloat((courseFee - totalCalculated).toFixed(2));
        installments[installments.length - 1].amount += difference;
        installments[installments.length - 1].amount = parseFloat(installments[installments.length - 1].amount.toFixed(2));
    }

    return installments;
  }, []);


  const addStudent = (studentData: Omit<Student, 'id' | 'paymentInstallments' | 'timestamp'>) => {
    const newStudentId = uuidv4();
    const newTimestamp = new Date().toISOString();
    const studentCourse = courses.find(c => c.name === studentData.chosenCourseName) || courses[0];
    const courseFeeToUse = studentData.courseFee > 0 ? studentData.courseFee : studentCourse.defaultFee;
    const totalInstallmentsToUse = studentData.totalInstallments > 0 ? studentData.totalInstallments : studentCourse.defaultInstallments;

    const newPaymentInstallments = generatePaymentInstallments(
        newStudentId,
        courseFeeToUse,
        totalInstallmentsToUse,
        newTimestamp, // Or a specific enrollment/course start date
        studentData.boletoDueDate
    );

    const newStudent: Student = { 
        ...studentData, 
        id: newStudentId, 
        timestamp: newTimestamp, 
        paymentInstallments: newPaymentInstallments,
        courseFee: courseFeeToUse, // Ensure courseFee is set
        totalInstallments: totalInstallmentsToUse // Ensure totalInstallments is set
    };
    setStudents(prev => [...prev, newStudent]);
  };

  const updateStudent = (studentId: string, studentData: Partial<Student>) => {
    setStudents(prev => prev.map(s => s.id === studentId ? { ...s, ...studentData } : s));
  };

  const deleteStudent = (studentId: string) => {
    setStudents(prev => prev.filter(s => s.id !== studentId));
  };

  const getStudentById = (studentId: string) => students.find(s => s.id === studentId);

  const addFac = (facData: Omit<FAC, 'code'>, codeSuffix: string) => {
    const baseCode = facData.courseId; // Or derive from name
    const newFacCode = `${baseCode}_T${codeSuffix}`; // e.g. C1_T18
    const newFac: FAC = { ...facData, code: newFacCode };
    setFacs(prev => [...prev, newFac]);
  };
  
  const updateFac = (facCode: string, facData: Partial<FAC>) => {
    setFacs(prev => prev.map(f => f.code === facCode ? { ...f, ...facData } : f));
  };

  const getFacByCode = (facCode: string) => facs.find(f => f.code === facCode);

  const addCourse = (courseData: Omit<Course, 'id'>) => {
    const newCourse: Course = { ...courseData, id: uuidv4() };
    setCourses(prev => [...prev, newCourse]);
  };

  const updateCourse = (courseId: string, courseData: Partial<Course>) => {
    setCourses(prev => prev.map(c => c.id === courseId ? { ...c, ...courseData } : c));
  };

  const getCourseById = (courseId: string) => courses.find(c => c.id === courseId);

  const addExpense = (expenseData: Omit<Expense, 'id'>) => {
    const newExpense: Expense = { ...expenseData, id: uuidv4() };
    setExpenses(prev => [...prev, newExpense]);
  };
  
  const updatePaymentInstallment = (studentId: string, installmentId: string, updates: Partial<PaymentInstallment>) => {
    setStudents(prevStudents => 
      prevStudents.map(student => {
        if (student.id === studentId) {
          return {
            ...student,
            paymentInstallments: student.paymentInstallments.map(inst => 
              inst.id === installmentId ? { ...inst, ...updates } : inst
            ),
          };
        }
        return student;
      })
    );
  };


  return (
    <AppContext.Provider value={{ 
      students, facs, courses, expenses, 
      addStudent, updateStudent, deleteStudent, getStudentById,
      addFac, updateFac, getFacByCode,
      addCourse, updateCourse, getCourseById,
      addExpense, updatePaymentInstallment,
      generatePaymentInstallments
    }}>
      {children}
    </AppContext.Provider>
  );
};

export const useAppContext = (): AppContextType => {
  const context = useContext(AppContext);
  if (!context) {
    throw new Error('useAppContext must be used within an AppProvider');
  }
  return context;
};
