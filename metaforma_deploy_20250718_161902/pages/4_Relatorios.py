import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from datetime import datetime, timedelta
import io

st.set_page_config(page_title="Relat√≥rios", page_icon="üìã", layout="wide")

def main():
    st.title("üìã Relat√≥rios")
    st.markdown("---")
    
    # Tabs para diferentes tipos de relat√≥rios
    tab1, tab2, tab3, tab4 = st.tabs(["üí∞ Relat√≥rio Financeiro", "üìä Performance", "üë• Inadimpl√™ncia", "üìà Dashboard Executivo"])
    
    with tab1:
        st.subheader("üí∞ Relat√≥rio Financeiro Detalhado")
        
        # Filtros
        col1, col2, col3 = st.columns(3)
        
        with col1:
            periodo_relatorio = st.selectbox(
                "Per√≠odo:",
                ["Todos os Per√≠odos", "FAC_17", "FAC_16", "FAC_15", "FAC_14"]
            )
        
        with col2:
            tipo_relatorio = st.selectbox(
                "Tipo de Relat√≥rio:",
                ["Completo", "Apenas Receitas", "Apenas Despesas", "Apenas Resultados"]
            )
        
        with col3:
            formato_valores = st.selectbox(
                "Formato dos Valores:",
                ["Reais (R$)", "Percentual (%)", "Ambos"]
            )
        
        # Dados financeiros consolidados
        dados_financeiros = {
            'Per√≠odo': ['FAC_17', 'FAC_16', 'FAC_15', 'FAC_14', 'TOTAL'],
            'Receita_Or√ßada': [25220.0, 15400.0, 17290.0, 20370.0, 78280.0],
            'Receita_Realizada': [3589.0, 3760.0, 7105.0, 9894.0, 24348.0],
            'Varia√ß√£o_Receita': [-21631.0, -11640.0, -10185.0, -10476.0, -53932.0],
            'Despesas_Or√ßadas': [0.0, 4301.6, 4591.6, 5804.2, 14697.4],
            'Despesas_Realizadas': [6072.9, 3662.9, 4052.7, 5364.3, 19152.7],
            'Varia√ß√£o_Despesas': [6072.9, -638.7, -538.9, -439.9, 4455.3],
            'Resultado_Or√ßado': [22698.0, 5549.2, 6349.2, 7282.9, 41879.3],
            'Resultado_Realizado': [-2696.9, 48.6, 1380.7, 1100.9, -166.9],
            'Varia√ß√£o_Resultado': [-25394.9, -5500.6, -4968.5, -6182.0, -42046.2]
        }
        
        df_financeiro = pd.DataFrame(dados_financeiros)
        
        # Aplicar filtro se necess√°rio
        if periodo_relatorio != "Todos os Per√≠odos":
            df_filtrado = df_financeiro[df_financeiro['Per√≠odo'] == periodo_relatorio]
        else:
            df_filtrado = df_financeiro
        
        # Exibir m√©tricas principais
        st.subheader("üìä M√©tricas Principais")
        
        col1, col2, col3, col4 = st.columns(4)
        
        total_receita_orc = df_financeiro[df_financeiro['Per√≠odo'] == 'TOTAL']['Receita_Or√ßada'].iloc[0]
        total_receita_real = df_financeiro[df_financeiro['Per√≠odo'] == 'TOTAL']['Receita_Realizada'].iloc[0]
        total_resultado_orc = df_financeiro[df_financeiro['Per√≠odo'] == 'TOTAL']['Resultado_Or√ßado'].iloc[0]
        total_resultado_real = df_financeiro[df_financeiro['Per√≠odo'] == 'TOTAL']['Resultado_Realizado'].iloc[0]
        
        with col1:
            st.metric(
                "üí∞ Receita Total Or√ßada",
                f"R$ {total_receita_orc:,.2f}",
                help="Valor total planejado de receitas"
            )
        
        with col2:
            st.metric(
                "üíµ Receita Total Realizada",
                f"R$ {total_receita_real:,.2f}",
                delta=f"{((total_receita_real - total_receita_orc) / total_receita_orc * 100):.1f}%"
            )
        
        with col3:
            st.metric(
                "üìä Resultado Or√ßado",
                f"R$ {total_resultado_orc:,.2f}",
                help="Lucro planejado"
            )
        
        with col4:
            st.metric(
                "üìà Resultado Realizado",
                f"R$ {total_resultado_real:,.2f}",
                delta=f"{((total_resultado_real - total_resultado_orc) / abs(total_resultado_orc) * 100):+.1f}%"
            )
        
        st.markdown("---")
        
        # Gr√°ficos do relat√≥rio financeiro
        if tipo_relatorio in ["Completo", "Apenas Receitas"]:
            st.subheader("üí∞ An√°lise de Receitas")
            
            fig_receitas = go.Figure()
            
            periodos = df_filtrado[df_filtrado['Per√≠odo'] != 'TOTAL']['Per√≠odo']
            receitas_orc = df_filtrado[df_filtrado['Per√≠odo'] != 'TOTAL']['Receita_Or√ßada']
            receitas_real = df_filtrado[df_filtrado['Per√≠odo'] != 'TOTAL']['Receita_Realizada']
            
            fig_receitas.add_trace(go.Bar(
                name='Or√ßado',
                x=periodos,
                y=receitas_orc,
                marker_color='lightblue'
            ))
            
            fig_receitas.add_trace(go.Bar(
                name='Realizado',
                x=periodos,
                y=receitas_real,
                marker_color='darkblue'
            ))
            
            fig_receitas.update_layout(
                title='Receitas: Or√ßado vs Realizado',
                xaxis_title='Per√≠odo',
                yaxis_title='Valor (R$)',
                barmode='group'
            )
            
            st.plotly_chart(fig_receitas, use_container_width=True)
        
        if tipo_relatorio in ["Completo", "Apenas Despesas"]:
            st.subheader("üí∏ An√°lise de Despesas")
            
            # Dados detalhados de despesas
            despesas_detalhadas = {
                'Categoria': ['Facebook (An√∫ncios)', 'Cr√©ditos Plataforma', 'Boletos', 'Gestor de Tr√°fego'],
                'FAC_17': [3000.0, 1305.2, 1167.7, 600.0],
                'FAC_16': [2100.0, 803.2, 159.7, 600.0],
                'FAC_15': [2100.0, 903.6, 449.1, 600.0],
                'FAC_14': [3000.0, 1104.4, 659.9, 600.0]
            }
            
            df_despesas = pd.DataFrame(despesas_detalhadas)
            
            # Gr√°fico de despesas por categoria
            fig_despesas = px.bar(
                df_despesas.melt(id_vars=['Categoria'], var_name='Per√≠odo', value_name='Valor'),
                x='Categoria',
                y='Valor',
                color='Per√≠odo',
                title='Despesas por Categoria e Per√≠odo',
                barmode='group'
            )
            
            st.plotly_chart(fig_despesas, use_container_width=True)
        
        if tipo_relatorio in ["Completo", "Apenas Resultados"]:
            st.subheader("üìà An√°lise de Resultados")
            
            fig_resultados = go.Figure()
            
            resultados_orc = df_filtrado[df_filtrado['Per√≠odo'] != 'TOTAL']['Resultado_Or√ßado']
            resultados_real = df_filtrado[df_filtrado['Per√≠odo'] != 'TOTAL']['Resultado_Realizado']
            
            fig_resultados.add_trace(go.Scatter(
                x=periodos,
                y=resultados_orc,
                mode='lines+markers',
                name='Resultado Or√ßado',
                line=dict(color='green')
            ))
            
            fig_resultados.add_trace(go.Scatter(
                x=periodos,
                y=resultados_real,
                mode='lines+markers',
                name='Resultado Realizado',
                line=dict(color='red')
            ))
            
            fig_resultados.update_layout(
                title='Evolu√ß√£o dos Resultados',
                xaxis_title='Per√≠odo',
                yaxis_title='Valor (R$)'
            )
            
            st.plotly_chart(fig_resultados, use_container_width=True)
        
        # Tabela detalhada
        st.subheader("üìã Dados Detalhados")
        
        colunas_exibir = ['Per√≠odo']
        
        if tipo_relatorio in ["Completo", "Apenas Receitas"]:
            colunas_exibir.extend(['Receita_Or√ßada', 'Receita_Realizada', 'Varia√ß√£o_Receita'])
        
        if tipo_relatorio in ["Completo", "Apenas Despesas"]:
            colunas_exibir.extend(['Despesas_Or√ßadas', 'Despesas_Realizadas', 'Varia√ß√£o_Despesas'])
        
        if tipo_relatorio in ["Completo", "Apenas Resultados"]:
            colunas_exibir.extend(['Resultado_Or√ßado', 'Resultado_Realizado', 'Varia√ß√£o_Resultado'])
        
        df_exibicao = df_filtrado[colunas_exibir].copy()
        
        # Formata√ß√£o condicional para valores
        if formato_valores in ["Reais (R$)", "Ambos"]:
            for col in df_exibicao.columns:
                if col != 'Per√≠odo':
                    df_exibicao[col] = df_exibicao[col].apply(lambda x: f"R$ {x:,.2f}")
        
        st.dataframe(df_exibicao, use_container_width=True, hide_index=True)
        
        # Bot√µes de exporta√ß√£o
        st.subheader("üì§ Exportar Relat√≥rio")
        
        col1, col2, col3 = st.columns(3)
        
        with col1:
            if st.button("üìä Exportar Excel", use_container_width=True):
                st.success("‚úÖ Relat√≥rio Excel gerado!")
                st.info("üí° Em produ√ß√£o, o download iniciaria automaticamente.")
        
        with col2:
            if st.button("üìÑ Exportar PDF", use_container_width=True):
                st.success("‚úÖ Relat√≥rio PDF gerado!")
                st.info("üí° Em produ√ß√£o, o download iniciaria automaticamente.")
        
        with col3:
            if st.button("üìã Copiar para Clipboard", use_container_width=True):
                st.success("‚úÖ Dados copiados!")
                st.info("üí° Em produ√ß√£o, os dados seriam copiados para a √°rea de transfer√™ncia.")
    
    with tab2:
        st.subheader("üìä Relat√≥rio de Performance")
        
        # KPIs de Performance
        st.subheader("üéØ Indicadores de Performance")
        
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.metric(
                "üéØ Taxa de Convers√£o",
                "31.1%",
                delta="2.1%",
                help="Receita realizada / Receita or√ßada"
            )
        
        with col2:
            st.metric(
                "üí∞ Ticket M√©dio",
                "R$ 300,60",
                delta="-R$ 50,40",
                help="Receita total / N√∫mero de alunos"
            )
        
        with col3:
            st.metric(
                "üìà ROI",
                "-0.87%",
                delta="-100.87%",
                help="(Resultado - Investimento) / Investimento"
            )
        
        with col4:
            st.metric(
                "‚ö° Efici√™ncia Operacional",
                "78.7%",
                delta="-21.3%",
                help="1 - (Despesas realizadas / Receita realizada)"
            )
        
        st.markdown("---")
        
        # Gr√°ficos de performance
        col1, col2 = st.columns(2)
        
        with col1:
            st.subheader("üìà Performance por Per√≠odo")
            
            periodos_perf = ['FAC_17', 'FAC_16', 'FAC_15', 'FAC_14']
            taxa_conversao = [14.2, 24.4, 41.1, 48.6]  # % receita realizada vs or√ßada
            
            fig_perf = px.line(
                x=periodos_perf,
                y=taxa_conversao,
                title='Taxa de Convers√£o por Per√≠odo (%)',
                markers=True
            )
            fig_perf.update_traces(line_color='blue', marker_color='red')
            fig_perf.update_layout(
                xaxis_title='Per√≠odo',
                yaxis_title='Taxa de Convers√£o (%)'
            )
            
            st.plotly_chart(fig_perf, use_container_width=True)
        
        with col2:
            st.subheader("üí∏ Efici√™ncia de Custos")
            
            # Dados de efici√™ncia (Despesas vs Receita)
            eficiencia_dados = {
                'Per√≠odo': periodos_perf,
                'Receita': [3589.0, 3760.0, 7105.0, 9894.0],
                'Despesas': [6072.9, 3662.9, 4052.7, 5364.3]
            }
            
            df_eficiencia = pd.DataFrame(eficiencia_dados)
            df_eficiencia['Efici√™ncia'] = (1 - df_eficiencia['Despesas'] / df_eficiencia['Receita']) * 100
            
            fig_efic = px.bar(
                df_eficiencia,
                x='Per√≠odo',
                y='Efici√™ncia',
                title='Efici√™ncia Operacional (%)',
                color='Efici√™ncia',
                color_continuous_scale=['red', 'yellow', 'green']
            )
            
            st.plotly_chart(fig_efic, use_container_width=True)
        
        # An√°lise de tend√™ncias
        st.subheader("üìä An√°lise de Tend√™ncias")
        
        tendencias_dados = {
            'M√©trica': ['Receita', 'Despesas', 'Resultado', 'Inadimpl√™ncia'],
            'Tend√™ncia': ['üìâ Declinante', 'üìà Crescente', 'üìâ Negativa', 'üìà Alta'],
            'Varia√ß√£o_Mensal': ['-15.2%', '+8.5%', '-85.3%', '+22.7%'],
            'Status': ['‚ö†Ô∏è Aten√ß√£o', '‚ö†Ô∏è Aten√ß√£o', 'üö® Cr√≠tico', 'üö® Cr√≠tico'],
            'A√ß√£o_Recomendada': ['Revisar estrat√©gia de vendas', 'Otimizar custos operacionais', 'Reestruturar modelo financeiro', 'Implementar pol√≠tica de cobran√ßa']
        }
        
        df_tendencias = pd.DataFrame(tendencias_dados)
        
        st.dataframe(
            df_tendencias,
            use_container_width=True,
            hide_index=True
        )
    
    with tab3:
        st.subheader("üë• Relat√≥rio de Inadimpl√™ncia")
        
        # Dados de inadimpl√™ncia por per√≠odo
        inadimplencia_dados = {
            'Per√≠odo': ['FAC_17', 'FAC_16', 'FAC_15', 'FAC_14', 'TOTAL'],
            'Receita_Bruta': [3589.0, 3760.0, 7105.0, 9894.0, 24348.0],
            'Inadimpl√™ncia': [2910.0, 0.0, 291.0, 2328.0, 5529.0],
            'Taxa_Inadimpl√™ncia': [81.1, 0.0, 4.1, 23.5, 22.7],
            'Receita_L√≠quida': [679.0, 3760.0, 6814.0, 7566.0, 18819.0]
        }
        
        df_inadim = pd.DataFrame(inadimplencia_dados)
        
        # M√©tricas de inadimpl√™ncia
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            total_inadim = df_inadim[df_inadim['Per√≠odo'] == 'TOTAL']['Inadimpl√™ncia'].iloc[0]
            st.metric(
                "üí∏ Total Inadimpl√™ncia",
                f"R$ {total_inadim:,.2f}",
                help="Valor total n√£o recebido"
            )
        
        with col2:
            taxa_media = df_inadim[df_inadim['Per√≠odo'] == 'TOTAL']['Taxa_Inadimpl√™ncia'].iloc[0]
            st.metric(
                "üìä Taxa M√©dia",
                f"{taxa_media:.1f}%",
                delta="+22.7%",
                help="Percentual de inadimpl√™ncia sobre receita bruta"
            )
        
        with col3:
            # Per√≠odo com maior inadimpl√™ncia
            periodo_max = df_inadim[df_inadim['Per√≠odo'] != 'TOTAL'].loc[df_inadim['Taxa_Inadimpl√™ncia'].idxmax(), 'Per√≠odo']
            taxa_max = df_inadim[df_inadim['Per√≠odo'] != 'TOTAL']['Taxa_Inadimpl√™ncia'].max()
            st.metric(
                "üö® Maior Taxa",
                f"{periodo_max}: {taxa_max:.1f}%",
                help="Per√≠odo com maior taxa de inadimpl√™ncia"
            )
        
        with col4:
            # Impacto financeiro
            impacto = (total_inadim / df_inadim[df_inadim['Per√≠odo'] == 'TOTAL']['Receita_Bruta'].iloc[0]) * 100
            st.metric(
                "üìâ Impacto na Receita",
                f"{impacto:.1f}%",
                help="Redu√ß√£o da receita devido √† inadimpl√™ncia"
            )
        
        st.markdown("---")
        
        # Gr√°ficos de inadimpl√™ncia
        col1, col2 = st.columns(2)
        
        with col1:
            st.subheader("üìä Taxa de Inadimpl√™ncia por Per√≠odo")
            
            periodos_inadim = df_inadim[df_inadim['Per√≠odo'] != 'TOTAL']['Per√≠odo']
            taxas_inadim = df_inadim[df_inadim['Per√≠odo'] != 'TOTAL']['Taxa_Inadimpl√™ncia']
            
            fig_inadim = px.bar(
                x=periodos_inadim,
                y=taxas_inadim,
                title='Taxa de Inadimpl√™ncia (%)',
                color=taxas_inadim,
                color_continuous_scale=['green', 'yellow', 'red']
            )
            fig_inadim.update_layout(
                xaxis_title='Per√≠odo',
                yaxis_title='Taxa (%)'
            )
            
            st.plotly_chart(fig_inadim, use_container_width=True)
        
        with col2:
            st.subheader("üí∞ Impacto Financeiro")
            
            # Gr√°fico de receita bruta vs l√≠quida
            fig_impacto = go.Figure()
            
            fig_impacto.add_trace(go.Bar(
                name='Receita Bruta',
                x=periodos_inadim,
                y=df_inadim[df_inadim['Per√≠odo'] != 'TOTAL']['Receita_Bruta'],
                marker_color='lightblue'
            ))
            
            fig_impacto.add_trace(go.Bar(
                name='Receita L√≠quida',
                x=periodos_inadim,
                y=df_inadim[df_inadim['Per√≠odo'] != 'TOTAL']['Receita_L√≠quida'],
                marker_color='darkblue'
            ))
            
            fig_impacto.update_layout(
                title='Receita Bruta vs L√≠quida',
                xaxis_title='Per√≠odo',
                yaxis_title='Valor (R$)',
                barmode='group'
            )
            
            st.plotly_chart(fig_impacto, use_container_width=True)
        
        # An√°lise detalhada
        st.subheader("üîç An√°lise Detalhada de Inadimpl√™ncia")
        
        # Tabela com dados de inadimpl√™ncia
        df_inadim_display = df_inadim[df_inadim['Per√≠odo'] != 'TOTAL'].copy()
        df_inadim_display['Receita_Bruta'] = df_inadim_display['Receita_Bruta'].apply(lambda x: f"R$ {x:,.2f}")
        df_inadim_display['Inadimpl√™ncia'] = df_inadim_display['Inadimpl√™ncia'].apply(lambda x: f"R$ {x:,.2f}")
        df_inadim_display['Receita_L√≠quida'] = df_inadim_display['Receita_L√≠quida'].apply(lambda x: f"R$ {x:,.2f}")
        df_inadim_display['Taxa_Inadimpl√™ncia'] = df_inadim_display['Taxa_Inadimpl√™ncia'].apply(lambda x: f"{x:.1f}%")
        
        st.dataframe(df_inadim_display, use_container_width=True, hide_index=True)
        
        # Recomenda√ß√µes
        st.subheader("üí° Recomenda√ß√µes")
        
        st.warning("""
        **üö® A√ß√µes Urgentes Recomendadas:**
        
        1. **FAC_17**: Taxa cr√≠tica de 81.1% - Implementar cobran√ßa imediata
        2. **FAC_14**: Taxa alta de 23.5% - Revisar pol√≠tica de cr√©dito
        3. **Implementar**: Sistema de cobran√ßa automatizada
        4. **Monitorar**: Indicadores de risco de inadimpl√™ncia
        5. **Revisar**: Processo de aprova√ß√£o de cr√©dito
        """)
    
    with tab4:
        st.subheader("üìà Dashboard Executivo")
        
        # Resumo executivo
        st.markdown("""
        ## üìä Resumo Executivo - Instituto Metaforma
        
        **Per√≠odo de An√°lise:** 2024 (FAC_14 a FAC_17)
        """)
        
        # Indicadores principais em cards
        col1, col2, col3 = st.columns(3)
        
        with col1:
            st.markdown("""
            ### üí∞ Situa√ß√£o Financeira
            - **Receita Or√ßada:** R$ 78.280,00
            - **Receita Realizada:** R$ 24.348,00
            - **Atingimento:** 31.1% do or√ßado
            - **Status:** üö® Cr√≠tico
            """)
        
        with col2:
            st.markdown("""
            ### üìä Operacional
            - **Total de Alunos:** 81
            - **Ticket M√©dio:** R$ 300,60
            - **Cursos Ativos:** 4 (FAC_14-17)
            - **Estados Atendidos:** 8
            """)
        
        with col3:
            st.markdown("""
            ### ‚ö†Ô∏è Principais Riscos
            - **Inadimpl√™ncia:** 22.7%
            - **Resultado Negativo:** -R$ 166,90
            - **ROI:** -0.87%
            - **Despesas Acima:** +30.3%
            """)
        
        st.markdown("---")
        
        # Gr√°fico executivo principal
        st.subheader("üìä Vis√£o Consolidada")
        
        # Criar gr√°fico combinado
        fig_executivo = go.Figure()
        
        periodos = ['FAC_17', 'FAC_16', 'FAC_15', 'FAC_14']
        receita_orc = [25220.0, 15400.0, 17290.0, 20370.0]
        receita_real = [3589.0, 3760.0, 7105.0, 9894.0]
        resultado = [-2696.9, 48.6, 1380.7, 1100.9]
        
        # Barras de receita
        fig_executivo.add_trace(go.Bar(
            name='Receita Or√ßada',
            x=periodos,
            y=receita_orc,
            yaxis='y',
            marker_color='lightblue',
            opacity=0.7
        ))
        
        fig_executivo.add_trace(go.Bar(
            name='Receita Realizada',
            x=periodos,
            y=receita_real,
            yaxis='y',
            marker_color='darkblue'
        ))
        
        # Linha de resultado
        fig_executivo.add_trace(go.Scatter(
            name='Resultado L√≠quido',
            x=periodos,
            y=resultado,
            yaxis='y2',
            mode='lines+markers',
            line=dict(color='red', width=3),
            marker=dict(size=8)
        ))
        
        fig_executivo.update_layout(
            title='Vis√£o Executiva: Receitas e Resultado por Per√≠odo',
            xaxis_title='Per√≠odo',
            yaxis=dict(
                title='Receita (R$)',
                side='left'
            ),
            yaxis2=dict(
                title='Resultado L√≠quido (R$)',
                side='right',
                overlaying='y'
            ),
            barmode='group',
            height=500
        )
        
        st.plotly_chart(fig_executivo, use_container_width=True)
        
        # An√°lise SWOT simplificada
        st.subheader("üéØ An√°lise Estrat√©gica")
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown("""
            ### ‚úÖ Pontos Fortes
            - Diversifica√ß√£o geogr√°fica (8 estados)
            - Curso especializado com demanda
            - Base de dados de alunos estabelecida
            - Sistema de gest√£o implementado
            """)
            
            st.markdown("""
            ### üö´ Pontos Fracos
            - Alta taxa de inadimpl√™ncia
            - Baixo atingimento do or√ßamento
            - Resultado financeiro negativo
            - Despesas operacionais elevadas
            """)
        
        with col2:
            st.markdown("""
            ### üîÆ Oportunidades
            - Melhorar processo de cobran√ßa
            - Otimizar investimento em marketing
            - Expandir para novos cursos
            - Implementar parcerias estrat√©gicas
            """)
            
            st.markdown("""
            ### ‚ö†Ô∏è Amea√ßas
            - Concorr√™ncia no mercado educacional
            - Impacto econ√¥mico na inadimpl√™ncia
            - Depend√™ncia de marketing digital
            - Sazonalidade na demanda
            """)
        
        # Recomenda√ß√µes estrat√©gicas
        st.subheader("üéØ Recomenda√ß√µes Estrat√©gicas")
        
        st.info("""
        **üîÑ A√ß√µes Imediatas (30 dias):**
        1. Implementar sistema de cobran√ßa automatizada
        2. Revisar estrat√©gia de marketing digital
        3. An√°lise detalhada da inadimpl√™ncia por per√≠odo
        4. Renegocia√ß√£o de contratos de fornecedores
        
        **üìà A√ß√µes de M√©dio Prazo (90 dias):**
        1. Reestrutura√ß√£o do modelo de precifica√ß√£o
        2. Diversifica√ß√£o da matriz de cursos
        3. Implementa√ß√£o de programa de fideliza√ß√£o
        4. Otimiza√ß√£o dos canais de aquisi√ß√£o
        
        **üöÄ A√ß√µes de Longo Prazo (180+ dias):**
        1. Expans√£o para novos mercados
        2. Parcerias estrat√©gicas com empresas
        3. Desenvolvimento de plataforma pr√≥pria
        4. Cria√ß√£o de programa de certifica√ß√£o
        """)

if __name__ == "__main__":
    main()
